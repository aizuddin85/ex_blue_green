// Jenkinsfile for nationalparks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    // This can be parameterized in pipeline, not gonna do for this static definition.
    def appNamespace = "parksmap"
    def sonarqubeUrl = "http://sonarqube-sonarqube.cloudapps.bytewise.com.my/"
    def nexusRelUrl = "http://nexus3.nexus3.svc.cluster.local:8081/repository/releases"
    def mavenMirrorUrl = "http://nexus3-nexus3.cloudapps.bytewise.com.my/repository/maven-all-public"
    
    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    // Defining base Maven command.
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checking out source.
    stage("Checking out source code") {
      git branch: 'master', changelog: false, poll: false, url: 'https://github.com/aizuddin85/ex_blue_green.git'
    }

    // For those stages below use this directory as contextDir and set build definition.
    dir('Nationalparks'){
      def groupId    = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version    = getVersionFromPom("pom.xml")
      def devTag  = "${version}-${BUILD_NUMBER}"
      def prodTag = "${version}"
      def destApp   = "nationalparks-green"
      def activeApp = ""
      stage("Building Target"){
        // Start to build binary from the source code
        sh "${mvnCmd} clean package -DskipTests=true"
      }
      stage("Unit Test"){
        // Executing unit test
        sh "${mvnCmd} test"
      }
      stage("Code Analysis"){
        // Executing coverage test using SonarQube
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarqubeUrl} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }
      stage("Publish Artifacts"){
        // Publish binary to Nexus for repository and later use
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusRelUrl}"
      }
      stage("Build & Tag Image"){
        // Delete old build definition and always exit True regardless exit code.
        sh "oc delete bc nationalparks -n ${appNamespace} || true"

        // Defining new build with new output target using Nexus mirror.
        sh "oc new-build --name=nationalparks --binary=true  jboss-eap70-openshift:1.7 --to=${appNamespace}/nationalparks:${devTag} -e MAVEN_MIRROR_URL=${mavenMirrorUrl} -n ${appNamespace}"

        // Start to build the new build definition using artifact uploaded to Nexus above.
        sh "oc start-build nationalparks --follow --from-file=${nexusRelUrl}/com/openshift/evg/roadshow/nationalparks/${version}/nationalparks-${version}.war -n ${appNamespace}"

        // Tag image with latest build number as latest image.
        sh "oc tag nationalparks:${devTag} nationalparks:latest -n ${appNamespace}"
      }
      stage("Deploying On Dev"){
        // Start to rollout latest image on Development.
        sh "oc rollout latest dc/nationalparks -n ${appNamespace}"
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
